// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: user.proto

package entity

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmailerClient is the client API for Emailer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmailerClient interface {
	// Send a request for emailer
	SendEmail(ctx context.Context, in *RequestEmailer, opts ...grpc.CallOption) (*CheckEmailer, error)
}

type emailerClient struct {
	cc grpc.ClientConnInterface
}

func NewEmailerClient(cc grpc.ClientConnInterface) EmailerClient {
	return &emailerClient{cc}
}

func (c *emailerClient) SendEmail(ctx context.Context, in *RequestEmailer, opts ...grpc.CallOption) (*CheckEmailer, error) {
	out := new(CheckEmailer)
	err := c.cc.Invoke(ctx, "/entity.Emailer/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmailerServer is the server API for Emailer service.
// All implementations must embed UnimplementedEmailerServer
// for forward compatibility
type EmailerServer interface {
	// Send a request for emailer
	SendEmail(context.Context, *RequestEmailer) (*CheckEmailer, error)
	mustEmbedUnimplementedEmailerServer()
}

// UnimplementedEmailerServer must be embedded to have forward compatible implementations.
type UnimplementedEmailerServer struct {
}

func (UnimplementedEmailerServer) SendEmail(context.Context, *RequestEmailer) (*CheckEmailer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedEmailerServer) mustEmbedUnimplementedEmailerServer() {}

// UnsafeEmailerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmailerServer will
// result in compilation errors.
type UnsafeEmailerServer interface {
	mustEmbedUnimplementedEmailerServer()
}

func RegisterEmailerServer(s grpc.ServiceRegistrar, srv EmailerServer) {
	s.RegisterService(&Emailer_ServiceDesc, srv)
}

func _Emailer_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEmailer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailerServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entity.Emailer/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailerServer).SendEmail(ctx, req.(*RequestEmailer))
	}
	return interceptor(ctx, in, info, handler)
}

// Emailer_ServiceDesc is the grpc.ServiceDesc for Emailer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Emailer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entity.Emailer",
	HandlerType: (*EmailerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _Emailer_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
